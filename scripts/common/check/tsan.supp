################################################################
# ivanov

# It is unsafe to use CTime::AsString() in exit print handler,
# because it allocates memory, that is not signal-safe.
# NOTE: ThreadSanitizer doesn't work with test_ncbi_system,
#       that have limits tests that incompatible with sanitizer. 
signal:corelib/test/test_ncbi_system.cpp

# False positive deadlock detection in util/test/test_histogram_mt. CXX-12217
deadlock:^CTest::ThreadHandler(int)

################################################################
# vasilche CXX-10546

# false positive -- loading locks come in any order, deadlocks are tracked and avoided
deadlock:^ncbi::objects::GBL::CInfoManager::x_LockInfoMutex
deadlock:^ncbi::objects::GBL::CInfoManager::ReleaseLoadLock

# false deadlock -- CInitMutexPool doesn't delete its mutexes
# the mutexes are reused after initialization, so new mutex order may be reversed
deadlock:^ncbi::CInitGuard::CInitGuard

# BerkeleyDB 4.6.21.1 mutex implementation uses 'volatile' internally,
# so it's not strictly correct and ThreadSanitizer complains about that.
# The library is opaque so we cannot suppress exact place in it,
# so unfortunately we have to suppress our BDB wrappers code that call BerkeleyDB
race:^ncbi::CBDB_File::x_Fetch
race:^ncbi::CBDB_File::ReadCursor
race:^ncbi::CBDB_RawFile::x_DB_CPut
race:^ncbi::CBDB_RawFile::CreateCursor
race:^ncbi::CBDB_FileCursor::Close
race:^ncbi::CBDB_Transaction::Commit
race:^ncbi::CBDB_Cache::x_Store
race:^__os_gettime
race:^__lock_getobj

# VDB *Release() functions have different reference counting code depending on processor.
# They use simple volatile keyword on i386 architecture.
# It's not sufficient by C++ Standard but it's guaranteed to work on i386.
race:^ncbi::objects::CSraRef<*>::Release

# There are reports of thread leaks inside VDB library.
# It's probably background loading threads, but needs to be checked.
thread:^KThreadMakeStackSize

# Formally suppress complains on grpc
race:^pollable_epoll$

################################################################
# lavr CXX-11285

# test_ncbi_trigger -- confirmed false-positive (lavr)
race:^TRIGGER_Reset

# thread leak in test_ncbi_trigger, probably can be rewritten
thread:test_ncbi_trigger

# Setting the shutdown flag doesn't need to be protected (by vakatov)
race:^ncbi::CTestServer::ShutdownRequested()

# This is for statistics purposes only. /connect/ncbi_socket.c
race:^s_Create$
race:^s_CreateListening$

# Debugging aid. For lock check consistency /connect/ncbi_socket.c
race:^g_NCBI_CoreCheckLock$
race:^g_NCBI_CoreCheckUnlock$

# Pre-check followed by lock-and-check-and-modify. /connect/ncbi_socket.c
race:^ncbi::CConnIniter::CConnIniter()
race:^s_InitAPI_$

# This is a debugging aid, code sanity check. /connect/ncbi_core.c
race:^MT_LOCK_AddRef$

# test_ncbi_conn_stream_mt -- confirmet false positive (lavr)
race:^MT_LOCK_DoInternal

# false positive (static value initialization)
race:^s_getlocalhostaddress

# ???
race:^s_LBSMD
race:^SERV_LBSMD_Open

################################################################
# ucko CXX-11303

# the race is real, but AFAICT harmless in this context
race:^tds_socket_write$
race:^tds_socket_read$


################################################################
# satskyse CXX-11623

# Formally suppress complains on libuv and datastax
race:^uv__writev$
race:^uv_mutex_lock$
race:^uv_mutex_unlock$
race:^uv_mutex_destroy$
race:^uv_export_wait$
race:^uv_export_wait$
race:^cass_prepared_bind$
race:^datastax::internal::core::Session::execute(datastax::internal::SharedRefPtr<datastax::internal::core::Request const> const&)$
race:^datastax::internal::core::Buffer::copy(datastax::internal::core::Buffer const&)$
race:^datastax::internal::core::Buffer::copy(unsigned long, char const*, unsigned long)$
race:^datastax::internal::Memory::free(void*)$
race:^std::__cxx11::basic_string<char, std::char_traits<char>, datastax::internal::Allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, datastax::internal::Allocator<char> > const&) const$


